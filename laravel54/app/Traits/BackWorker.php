<?php/** * Created by PhpStorm. * User: Jafar Jabr * Date: 3/5/2017 * Time: 7:07 PM */namespace App\Traits;use App\Models\Customer;use App\Models\Account;use Illuminate\Support\Facades\DB;trait BackWorker{    public function isThird($number)    {        if ($number % 3 == 0) {            return true;        }        return false;    }    public function getCustomerId($userId)    {        $customerId = Customer::select('id')->where('user_id', $userId)->first();        return $customerId['id'];    }    public function customerAccount($customerId)    {        $Account = Account::select('id', 'amount', 'bonus')->where('customer_id', $customerId)->first();        return $Account;    }    /**     * @param int $days     * @return mixed     * this query doing exactly what is required for reporting     */    public function reporting($days = 7)    {        $date = date('Y-m-d H:i:s', time() - ($days * 86400));        $sql = "SELECT A.id , A.country , CURDATE() as theDate                 ,(select count(*) from deposits where account_id = B.id) as depositNo                 ,(select sum(amount) from deposits where account_id = B.id) as totalDeposit                  ,(select count(*) from withdraws where account_id = B.id) as withdrawNo                 ,(select sum(amount) from withdraws where account_id = B.id) as totalWithdraw                 FROM customers A LEFT JOIN                 account B ON (A.id = B.customer_id ) LEFT JOIN deposits C ON                 (C.account_id = B.id AND C.created_at >= '$date')                 LEFT JOIN withdraws D ON                 (D.account_id = B.id AND D.created_at >= '$date')                GROUP BY A.id, A.country, B.id Having                COUNT(C.id) > 0 OR COUNT(D.id) > 0";        $report = DB::select($sql);        return $report;    }}